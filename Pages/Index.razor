@page "/"

@using Microsoft.EntityFrameworkCore

@using Microsoft.AspNetCore.SignalR.Client

@inject IDbContextFactory<ChatContext> DbFactory

@inject IUserService UserService

@inject NavigationManager Navigation

@inject IJSRuntime js

<container_>
	<ProfileChat Name=@_user?.Name Image=@_user?.Image />
	<Chat messages=messages users=users _user=_user />
	<InputMessage OnSendMessage="SendMessage" />
</container_>

@code {
	User? _user;

	List<User> users = new();

	List<Message> messages = new();

	private HubConnection hubConnection;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();

		if (context.Messages is not null)
		{

			messages = await context.Messages.AsQueryable().ToListAsync();

			await InvokeAsync(StateHasChanged);
		}

		if (context.Users is not null)
		{
			users = await context.Users.AsQueryable().ToListAsync();
		}



		if (hubConnection is null)
		{
			hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
			.Build();

			hubConnection.On<Message>("ReceiveMessage", async (message) =>
			{
				messages.Add(message);



				await InvokeAsync(StateHasChanged);

			});

			await hubConnection.StartAsync();
		}

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("autoScrollEnd");

		if (firstRender)
		{
			await js.InvokeVoidAsync("enableAutoScroll");

			await UserService.GetUserFromLocalStorageAsync();
			if (UserService.GetUser() is not null)
			{

				if (users.FirstOrDefault(u => u.Id == UserService.GetUser().Id) is not null)
				{
					_user = UserService.GetUser();
				}
				else
				{
					await UserService.ClearUser();
				}
			}
			await InvokeAsync(StateHasChanged);
		}
	}



	private async Task SendMessage(string newMessage)
	{
		if (_user is not null)
		{

			if (newMessage is not null && newMessage != "")
			{
				using var context = DbFactory.CreateDbContext();

				if (context is not null && context.Messages is not null)
				{
					var tempMessage = new Message
						{
							Content = newMessage,
							Remetent = _user.Id,
							CreatedAt = DateTime.Now
						};
					context.Messages.Add(tempMessage);

					try
					{
						await context.SaveChangesAsync();
					}
					catch (Exception ex)
					{
						Console.WriteLine(ex);
					}

					try
					{
						await hubConnection.SendAsync("SendMessage", tempMessage);

					}
					catch (Exception ex)
					{
						Console.WriteLine($"\n{ex.Message}\n");
					}

					newMessage = "";
				}
			}
		}
		else
		{
			await js.InvokeVoidAsync("alert", "você não está logado");
		}
	}
}